// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: studentclass/service.proto

package studentclassv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentClassService_GetStudentClass_FullMethodName    = "/bannote.userservice.studentclass.v1.StudentClassService/GetStudentClass"
	StudentClassService_CreateStudentClass_FullMethodName = "/bannote.userservice.studentclass.v1.StudentClassService/CreateStudentClass"
	StudentClassService_UpdateStudentClass_FullMethodName = "/bannote.userservice.studentclass.v1.StudentClassService/UpdateStudentClass"
	StudentClassService_DeleteStudentClass_FullMethodName = "/bannote.userservice.studentclass.v1.StudentClassService/DeleteStudentClass"
	StudentClassService_ListStudentClasses_FullMethodName = "/bannote.userservice.studentclass.v1.StudentClassService/ListStudentClasses"
)

// StudentClassServiceClient is the client API for StudentClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The student class service definition.
type StudentClassServiceClient interface {
	// 학반 ID로 학반 조회 API
	GetStudentClass(ctx context.Context, in *GetStudentClassRequest, opts ...grpc.CallOption) (*GetStudentClassResponse, error)
	// 학반 생성 API
	CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error)
	// 학반 수정 API
	UpdateStudentClass(ctx context.Context, in *UpdateStudentClassRequest, opts ...grpc.CallOption) (*UpdateStudentClassResponse, error)
	// 학반 삭제 API
	DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error)
	// 학반 목록 조회 API
	ListStudentClasses(ctx context.Context, in *ListStudentClassesRequest, opts ...grpc.CallOption) (*ListStudentClassesResponse, error)
}

type studentClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentClassServiceClient(cc grpc.ClientConnInterface) StudentClassServiceClient {
	return &studentClassServiceClient{cc}
}

func (c *studentClassServiceClient) GetStudentClass(ctx context.Context, in *GetStudentClassRequest, opts ...grpc.CallOption) (*GetStudentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_GetStudentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) CreateStudentClass(ctx context.Context, in *CreateStudentClassRequest, opts ...grpc.CallOption) (*CreateStudentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_CreateStudentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) UpdateStudentClass(ctx context.Context, in *UpdateStudentClassRequest, opts ...grpc.CallOption) (*UpdateStudentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_UpdateStudentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) DeleteStudentClass(ctx context.Context, in *DeleteStudentClassRequest, opts ...grpc.CallOption) (*DeleteStudentClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudentClassResponse)
	err := c.cc.Invoke(ctx, StudentClassService_DeleteStudentClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClassServiceClient) ListStudentClasses(ctx context.Context, in *ListStudentClassesRequest, opts ...grpc.CallOption) (*ListStudentClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStudentClassesResponse)
	err := c.cc.Invoke(ctx, StudentClassService_ListStudentClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentClassServiceServer is the server API for StudentClassService service.
// All implementations must embed UnimplementedStudentClassServiceServer
// for forward compatibility.
//
// The student class service definition.
type StudentClassServiceServer interface {
	// 학반 ID로 학반 조회 API
	GetStudentClass(context.Context, *GetStudentClassRequest) (*GetStudentClassResponse, error)
	// 학반 생성 API
	CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error)
	// 학반 수정 API
	UpdateStudentClass(context.Context, *UpdateStudentClassRequest) (*UpdateStudentClassResponse, error)
	// 학반 삭제 API
	DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error)
	// 학반 목록 조회 API
	ListStudentClasses(context.Context, *ListStudentClassesRequest) (*ListStudentClassesResponse, error)
	mustEmbedUnimplementedStudentClassServiceServer()
}

// UnimplementedStudentClassServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentClassServiceServer struct{}

func (UnimplementedStudentClassServiceServer) GetStudentClass(context.Context, *GetStudentClassRequest) (*GetStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentClass not implemented")
}
func (UnimplementedStudentClassServiceServer) CreateStudentClass(context.Context, *CreateStudentClassRequest) (*CreateStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentClass not implemented")
}
func (UnimplementedStudentClassServiceServer) UpdateStudentClass(context.Context, *UpdateStudentClassRequest) (*UpdateStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentClass not implemented")
}
func (UnimplementedStudentClassServiceServer) DeleteStudentClass(context.Context, *DeleteStudentClassRequest) (*DeleteStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentClass not implemented")
}
func (UnimplementedStudentClassServiceServer) ListStudentClasses(context.Context, *ListStudentClassesRequest) (*ListStudentClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentClasses not implemented")
}
func (UnimplementedStudentClassServiceServer) mustEmbedUnimplementedStudentClassServiceServer() {}
func (UnimplementedStudentClassServiceServer) testEmbeddedByValue()                             {}

// UnsafeStudentClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentClassServiceServer will
// result in compilation errors.
type UnsafeStudentClassServiceServer interface {
	mustEmbedUnimplementedStudentClassServiceServer()
}

func RegisterStudentClassServiceServer(s grpc.ServiceRegistrar, srv StudentClassServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentClassServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentClassService_ServiceDesc, srv)
}

func _StudentClassService_GetStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).GetStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_GetStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).GetStudentClass(ctx, req.(*GetStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_CreateStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).CreateStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_CreateStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).CreateStudentClass(ctx, req.(*CreateStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_UpdateStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).UpdateStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_UpdateStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).UpdateStudentClass(ctx, req.(*UpdateStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_DeleteStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).DeleteStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_DeleteStudentClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).DeleteStudentClass(ctx, req.(*DeleteStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentClassService_ListStudentClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentClassServiceServer).ListStudentClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentClassService_ListStudentClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentClassServiceServer).ListStudentClasses(ctx, req.(*ListStudentClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentClassService_ServiceDesc is the grpc.ServiceDesc for StudentClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bannote.userservice.studentclass.v1.StudentClassService",
	HandlerType: (*StudentClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentClass",
			Handler:    _StudentClassService_GetStudentClass_Handler,
		},
		{
			MethodName: "CreateStudentClass",
			Handler:    _StudentClassService_CreateStudentClass_Handler,
		},
		{
			MethodName: "UpdateStudentClass",
			Handler:    _StudentClassService_UpdateStudentClass_Handler,
		},
		{
			MethodName: "DeleteStudentClass",
			Handler:    _StudentClassService_DeleteStudentClass_Handler,
		},
		{
			MethodName: "ListStudentClasses",
			Handler:    _StudentClassService_ListStudentClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studentclass/service.proto",
}
