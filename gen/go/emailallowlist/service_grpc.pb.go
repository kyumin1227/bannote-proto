// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: emailallowlist/service.proto

package emailallowlistv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailAllowlistService_AddEmailAllowlist_FullMethodName    = "/bannote.userservice.emailallowlist.v1.EmailAllowlistService/AddEmailAllowlist"
	EmailAllowlistService_RemoveEmailAllowlist_FullMethodName = "/bannote.userservice.emailallowlist.v1.EmailAllowlistService/RemoveEmailAllowlist"
	EmailAllowlistService_ListEmailAllowlists_FullMethodName  = "/bannote.userservice.emailallowlist.v1.EmailAllowlistService/ListEmailAllowlists"
)

// EmailAllowlistServiceClient is the client API for EmailAllowlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The email allowlist service definition.
type EmailAllowlistServiceClient interface {
	// 이메일 허용 목록 추가 API
	AddEmailAllowlist(ctx context.Context, in *AddEmailAllowlistRequest, opts ...grpc.CallOption) (*AddEmailAllowlistResponse, error)
	// 이메일 허용 목록 삭제 API
	RemoveEmailAllowlist(ctx context.Context, in *RemoveEmailAllowlistRequest, opts ...grpc.CallOption) (*RemoveEmailAllowlistResponse, error)
	// 이메일 허용 목록 전체 조회 API
	ListEmailAllowlists(ctx context.Context, in *ListEmailAllowlistsRequest, opts ...grpc.CallOption) (*ListEmailAllowlistsResponse, error)
}

type emailAllowlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailAllowlistServiceClient(cc grpc.ClientConnInterface) EmailAllowlistServiceClient {
	return &emailAllowlistServiceClient{cc}
}

func (c *emailAllowlistServiceClient) AddEmailAllowlist(ctx context.Context, in *AddEmailAllowlistRequest, opts ...grpc.CallOption) (*AddEmailAllowlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEmailAllowlistResponse)
	err := c.cc.Invoke(ctx, EmailAllowlistService_AddEmailAllowlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailAllowlistServiceClient) RemoveEmailAllowlist(ctx context.Context, in *RemoveEmailAllowlistRequest, opts ...grpc.CallOption) (*RemoveEmailAllowlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveEmailAllowlistResponse)
	err := c.cc.Invoke(ctx, EmailAllowlistService_RemoveEmailAllowlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailAllowlistServiceClient) ListEmailAllowlists(ctx context.Context, in *ListEmailAllowlistsRequest, opts ...grpc.CallOption) (*ListEmailAllowlistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailAllowlistsResponse)
	err := c.cc.Invoke(ctx, EmailAllowlistService_ListEmailAllowlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailAllowlistServiceServer is the server API for EmailAllowlistService service.
// All implementations must embed UnimplementedEmailAllowlistServiceServer
// for forward compatibility.
//
// The email allowlist service definition.
type EmailAllowlistServiceServer interface {
	// 이메일 허용 목록 추가 API
	AddEmailAllowlist(context.Context, *AddEmailAllowlistRequest) (*AddEmailAllowlistResponse, error)
	// 이메일 허용 목록 삭제 API
	RemoveEmailAllowlist(context.Context, *RemoveEmailAllowlistRequest) (*RemoveEmailAllowlistResponse, error)
	// 이메일 허용 목록 전체 조회 API
	ListEmailAllowlists(context.Context, *ListEmailAllowlistsRequest) (*ListEmailAllowlistsResponse, error)
	mustEmbedUnimplementedEmailAllowlistServiceServer()
}

// UnimplementedEmailAllowlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailAllowlistServiceServer struct{}

func (UnimplementedEmailAllowlistServiceServer) AddEmailAllowlist(context.Context, *AddEmailAllowlistRequest) (*AddEmailAllowlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmailAllowlist not implemented")
}
func (UnimplementedEmailAllowlistServiceServer) RemoveEmailAllowlist(context.Context, *RemoveEmailAllowlistRequest) (*RemoveEmailAllowlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmailAllowlist not implemented")
}
func (UnimplementedEmailAllowlistServiceServer) ListEmailAllowlists(context.Context, *ListEmailAllowlistsRequest) (*ListEmailAllowlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailAllowlists not implemented")
}
func (UnimplementedEmailAllowlistServiceServer) mustEmbedUnimplementedEmailAllowlistServiceServer() {}
func (UnimplementedEmailAllowlistServiceServer) testEmbeddedByValue()                               {}

// UnsafeEmailAllowlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailAllowlistServiceServer will
// result in compilation errors.
type UnsafeEmailAllowlistServiceServer interface {
	mustEmbedUnimplementedEmailAllowlistServiceServer()
}

func RegisterEmailAllowlistServiceServer(s grpc.ServiceRegistrar, srv EmailAllowlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailAllowlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailAllowlistService_ServiceDesc, srv)
}

func _EmailAllowlistService_AddEmailAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailAllowlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailAllowlistServiceServer).AddEmailAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailAllowlistService_AddEmailAllowlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailAllowlistServiceServer).AddEmailAllowlist(ctx, req.(*AddEmailAllowlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailAllowlistService_RemoveEmailAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEmailAllowlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailAllowlistServiceServer).RemoveEmailAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailAllowlistService_RemoveEmailAllowlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailAllowlistServiceServer).RemoveEmailAllowlist(ctx, req.(*RemoveEmailAllowlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailAllowlistService_ListEmailAllowlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailAllowlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailAllowlistServiceServer).ListEmailAllowlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailAllowlistService_ListEmailAllowlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailAllowlistServiceServer).ListEmailAllowlists(ctx, req.(*ListEmailAllowlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailAllowlistService_ServiceDesc is the grpc.ServiceDesc for EmailAllowlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailAllowlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bannote.userservice.emailallowlist.v1.EmailAllowlistService",
	HandlerType: (*EmailAllowlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmailAllowlist",
			Handler:    _EmailAllowlistService_AddEmailAllowlist_Handler,
		},
		{
			MethodName: "RemoveEmailAllowlist",
			Handler:    _EmailAllowlistService_RemoveEmailAllowlist_Handler,
		},
		{
			MethodName: "ListEmailAllowlists",
			Handler:    _EmailAllowlistService_ListEmailAllowlists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emailallowlist/service.proto",
}
